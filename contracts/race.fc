#include "imports/stdlib.fc";

;; =============== storage =============================

(cell, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  var addr1 = ds~load_ref();
  var addr2 = ds~load_ref();
  var addr3 = ds~load_ref();
  var addr4 = ds~load_ref();
  return (addr1, addr2, addr3, addr4);
}

() save_data(cell addr1, cell addr2, cell addr3, cell addr4) impure inline {
  set_data(begin_cell()
    .store_ref(addr1)
    .store_ref(addr2)
    .store_ref(addr3)
    .store_ref(addr4)
    .end_cell());
}

(int, slice) load_address_and_time(cell addr_cell) inline {
  var ds = addr_cell.begin_parse();
  var time = ds~load_uint(64);
  var address = ds~load_msg_addr();
  return (time, address);
}

cell save_address_and_time(int time, slice address) inline {
  return begin_cell()
    .store_uint(time, 64)
    .store_slice(address)
    .end_cell();
}

;; =============== messages =============================

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }
  int op = in_msg_body~load_uint(32);
  var (addr1, addr2, addr3, addr4) = load_data();

  int new_time = in_msg_body~load_uint(64);
  slice new_address = in_msg_body~load_msg_addr();
  cell new_entry = save_address_and_time(new_time, new_address);

  ;; Update the correct address based on op
  if (op == 1) {
    save_data(new_entry, addr2, addr3, addr4);
  } if (op == 2) {
    save_data(addr1, new_entry, addr3, addr4);
  } if (op == 3) {
    save_data(addr1, addr2, new_entry, addr4);
  } if (op == 4) {
    save_data(addr1, addr2, addr3, new_entry);
  }
}

;; =============== getters =============================

(int, slice) get_address_and_time(int index) method_id {
  var (addr1, addr2, addr3, addr4) = load_data();
  if (index == 1) {
    return load_address_and_time(addr1);
  } if (index == 2) {
    return load_address_and_time(addr2);
  } if (index == 3) {
    return load_address_and_time(addr3);
  } if (index == 4) {
    return load_address_and_time(addr4);
  } else {
    throw(100);  ;; Invalid index
  }
  ;; Add a default return to handle all code paths
  return (0, null().begin_parse());
}
